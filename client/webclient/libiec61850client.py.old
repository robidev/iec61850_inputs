#!/usr/bin/env python3

import os,sys
import ctypes
import time
import iec61850
import logging
import pprint

from urllib.parse import urlparse

logger = logging.getLogger(__name__)

class iec61850client():

	def __init__(self, readvaluecallback = None, loggerRef = None):
		global logger
		if loggerRef != None:
			logger = loggerRef

		self.polling = {}
		self.connections = {}
		self.readvaluecallback = readvaluecallback


	@staticmethod
	def printValue(value):
		type = iec61850.MmsValue_getTypeString(value)
		if type == "boolean":
			return ("%r" % iec61850.MmsValue_getBoolean(value)), type
		if type == "array":
			return ("arr"), type
		if type ==  "bcd":
			return ("bcd"), type
		if type ==  "binary-time":
			return ("%i" % iec61850.MmsValue_getBinaryTimeAsUtcMs(value)), type
		if type == "bit-string":
			sz = iec61850.MmsValue_getBitStringSize(value)
			val = iec61850.MmsValue_getBitStringAsInteger(value)
			bs = ""
			for _ in range(sz):
				if val & (1>>sz) != 0:
					bs += "1"
				else:
					bs += "0"
			return ("[%s]" % bs), type
		if type == "access-error":
			return ("ACCESS ERROR"), type
		if type == "float":
			return ("%f" % iec61850.MmsValue_toFloat(value)), type
		if type == "generalized-time":
			return ("%u" % iec61850.MmsValue_toUnixTimestamp(value)), type
		if type == "integer":
			return ("%i" % iec61850.MmsValue_toInt64(value)), type
		if type == "oid":
			return ("OID ERROR"), type
		if type == "mms-string":
			return ("%s" % iec61850.MmsValue_toString(value)), type
		if type == "structure":
			return ("STRUCTURE"), type
		if type == "octet-string":
			len = iec61850.MmsValue_getOctetStringSize(value)
			buf = iec61850.MmsValue_getOctetStringBuffer(value)
			#magic cast to convert a swig pointer into a ctypes pointer, the int(buf) works, but why?
			buff = ctypes.cast(int(buf), ctypes.POINTER(ctypes.c_char))
			#allocate a buffer for the result
			res = bytearray(len)
			#create a pointer to the result buffer
			rptr = (ctypes.c_char * len).from_buffer(res)
			#copy the memory from the swig buffer to the result buffer
			ctypes.memmove(rptr, buff, len)
			return ("%s" % ''.join(format(x, '02x') for x in res)), type
		if type == "unsigned":
			return ("%u" % iec61850.MmsValue_toUint32(value)), type
		if type == "utc-time":
			return ("%u" % iec61850.MmsValue_getUtcTimeInMs(value)), type
		if type == "visible-string":
			return ("%s" % iec61850.MmsValue_toString(value)), type
		if type == "unknown(error)":
			return ("UNKNOWN ERROR"), type
		return ("CANNOT FIND TYPE"), type


	@staticmethod
	def printDataDirectory(con, doRef):
		model = {}

		ret = iec61850.IedConnection_getDataDirectoryFC(con, doRef)
		if isinstance(ret, int):#ret becomes int if connection is lost
			return model
		[dataAttributes, error] = ret
		if error != 0:
			logger.error("could not get logical device list, error:%i" % error)

		if dataAttributes != None:
			dataAttribute = iec61850.LinkedList_getNext(dataAttributes)

			while dataAttribute != None:
				daName = iec61850.toCharP(dataAttribute.data)
				daRef = doRef+"."+daName[:-4]
				fcName = daName[-3:-1]

				model[daRef] = {}
				model[daRef]['reftype'] = "DA"
				model[daRef]['FC'] = fcName

				submodel = iec61850client.printDataDirectory(con,daRef)
				if submodel:
					model[daRef]['type'] = "structure"
					model[daRef]['value'] = "{}"
					model.update(submodel)
					
				else:
					#read DA
					fc = iec61850.FunctionalConstraint_fromString(fcName) 
					ret = iec61850.IedConnection_readObject(con, daRef, fc)
					if isinstance(ret, int):#ret becomes int if connection is lost
						return model
					[value, error] = ret
					if error == 0:
						model[daRef]['value'], model[daRef]['type'] = iec61850client.printValue(value)
						iec61850.MmsValue_delete(value)

				dataAttribute = iec61850.LinkedList_getNext(dataAttribute)

			iec61850.LinkedList_destroy(dataAttributes)
		return model

	@staticmethod
	def tprintDataDirectory(con, doRef):
		tmodel = {}

		ret = iec61850.IedConnection_getDataDirectoryFC(con, doRef)
		if isinstance(ret, int):#ret becomes int if connection is lost
			return tmodel
		[dataAttributes, error] = ret
		if error != 0:
			logger.error("could not get logical device list, error:%i" % error)

		if dataAttributes != None:
			dataAttribute = iec61850.LinkedList_getNext(dataAttributes)

			while dataAttribute != None:
				daName = iec61850.toCharP(dataAttribute.data)
				daRef = doRef+"."+daName[:-4]
				fcName = daName[-3:-1]

				submodel = iec61850client.tprintDataDirectory(con,daRef)
				if submodel:
					tmodel[daName[:-4]] = submodel
					
				else:
					tmodel[daName[:-4]] = {}
					tmodel[daName[:-4]]['reftype'] = "DA"
					tmodel[daName[:-4]]['FC'] = fcName
					tmodel[daName[:-4]]['value'] = "UNKNOWN"
					#read DA
					fc = iec61850.FunctionalConstraint_fromString(fcName) 
					ret = iec61850.IedConnection_readObject(con, daRef, fc)
					if isinstance(ret, int):#ret becomes int if connection is lost
						return tmodel
					[value, error] = ret
					if error == 0:
						tmodel[daName[:-4]]['value'], tmodel[daName[:-4]]['type'] = iec61850client.printValue(value)
						iec61850.MmsValue_delete(value)

				dataAttribute = iec61850.LinkedList_getNext(dataAttribute)

			iec61850.LinkedList_destroy(dataAttributes)
		return tmodel


	@staticmethod
	def discovery(con):
		model = {}

		ret = iec61850.IedConnection_getLogicalDeviceList(con)
		if isinstance(ret, int):#ret becomes int if connection is lost
			return model
		[deviceList, error] = ret

		if error != 0:
			logger.error("could not get logical device list, error:%i" % error)

		if deviceList != None:
			device = iec61850.LinkedList_getNext(deviceList)
			while device:
				LD_name=iec61850.toCharP(device.data)
				#logger.error("LD: %s" % LD_name)
				model[LD_name] = {}
				model[LD_name]['reftype'] = "LD"
				model[LD_name]['type'] = "structure"
				model[LD_name]['FC'] = "**"
				model[LD_name]['value'] = "{}"

				ret = iec61850.IedConnection_getLogicalDeviceDirectory(con, LD_name)
				if isinstance(ret, int):#ret becomes int if connection is lost
					iec61850.LinkedList_destroy(deviceList)
					return model
					
				[logicalNodes, error] = ret

				logicalNode = iec61850.LinkedList_getNext(logicalNodes)
				while logicalNode:
					LN_name=iec61850.toCharP(logicalNode.data)
					#logger.error(" LN: %s" % LN_name)
					model[LD_name+"/"+LN_name] = {}
					model[LD_name+"/"+LN_name]['reftype'] = "LN"
					model[LD_name+"/"+LN_name]['type'] = "structure"
					model[LD_name+"/"+LN_name]['FC'] = "**"
					model[LD_name+"/"+LN_name]['value'] = "{}"

					#[LNobjects, error] = iec61850.IedConnection_getLogicalNodeVariables(con, LD_name+"/"+LN_name)
					ret = iec61850.IedConnection_getLogicalNodeDirectory(con, LD_name+"/"+LN_name,iec61850.ACSI_CLASS_DATA_OBJECT)
					if isinstance(ret, int):#ret becomes int if connection is lost
						iec61850.LinkedList_destroy(logicalNodes)
						iec61850.LinkedList_destroy(deviceList)
						return model
					[LNobjects, error] = ret

					LNobject = iec61850.LinkedList_getNext(LNobjects)
					while LNobject:
						Do = iec61850.toCharP(LNobject.data)
						#logger.error("  DO: %s" % Do)
						model[LD_name+"/"+LN_name+"."+Do] = {}
						model[LD_name+"/"+LN_name+"."+Do]['reftype'] = "DO"
						model[LD_name+"/"+LN_name+"."+Do]['type'] = "structure"
						model[LD_name+"/"+LN_name+"."+Do]['FC'] = "**"
						model[LD_name+"/"+LN_name+"."+Do]['value'] = "{}"

						doRef = LD_name+"/"+LN_name+"."+Do

						submodel = iec61850client.printDataDirectory(con, doRef)
						model.update(submodel)

						LNobject = iec61850.LinkedList_getNext(LNobject)
					iec61850.LinkedList_destroy(LNobjects)

					ret = iec61850.IedConnection_getLogicalNodeDirectory(con, LD_name+"/"+LN_name, iec61850.ACSI_CLASS_DATA_SET)
					if isinstance(ret, int):#ret becomes int if connection is lost
						iec61850.LinkedList_destroy(logicalNodes)
						iec61850.LinkedList_destroy(deviceList)
						return model
					[LNdss, error] = ret

					LNds = iec61850.LinkedList_getNext(LNdss)
					while LNds:
						isDel = None
						DSname = iec61850.toCharP(LNds.data)
						model[LD_name+"/"+LN_name+"$"+DSname] = {}
						model[LD_name+"/"+LN_name+"$"+DSname]['reftype'] = "DS"
						model[LD_name+"/"+LN_name+"$"+DSname]['type'] = "structure"
						model[LD_name+"/"+LN_name+"$"+DSname]['FC'] = "**"
						model[LD_name+"/"+LN_name+"$"+DSname]['value'] = "{}"

						#cannot pass the right type to isDeletable(last arg).. keeps complaining about 'bool *', and isDel = ctypes.pointer(ctypes.c_bool(False)) does not work
						ret = iec61850.IedConnection_getDataSetDirectory(con, LD_name+"/"+LN_name+"."+DSname, isDel )  
						if isinstance(ret, int):#ret becomes int if connection is lost
							iec61850.LinkedList_destroy(LNdss)
							iec61850.LinkedList_destroy(logicalNodes)
							iec61850.LinkedList_destroy(deviceList)
							return model
						[dataSetMembers, error] = ret
						#all DS are assumed not deletable 
						#if isDel == None:
						#	logger.error("  DS: %s, not Deletable" % DSname)
						#else:
						#	logger.error("  DS: %s, is Deletable" % DSname)
						dataSetMemberRef = iec61850.LinkedList_getNext(dataSetMembers)

						i = 0
						while dataSetMemberRef:
							dsRef = iec61850.toCharP(dataSetMemberRef.data)
							DX = dsRef[:-4]
							FC = dsRef[-3:-1]
							#logger.error("      %s" % DX)
							model[LD_name+"/"+LN_name+"$"+DSname+"^"+DX] = {}
							model[LD_name+"/"+LN_name+"$"+DSname+"^"+DX]['reftype'] = "DX"
							model[LD_name+"/"+LN_name+"$"+DSname+"^"+DX]['FC'] = FC
							model[LD_name+"/"+LN_name+"$"+DSname+"^"+DX]['type'] = "reference"
							model[LD_name+"/"+LN_name+"$"+DSname+"^"+DX]['value'] = str(i)
							dataSetMemberRef = iec61850.LinkedList_getNext(dataSetMemberRef)
							i += 1
						iec61850.LinkedList_destroy(dataSetMembers)
						LNds = iec61850.LinkedList_getNext(LNds)

					iec61850.LinkedList_destroy(LNdss)
					logicalNode = iec61850.LinkedList_getNext(logicalNode)

				iec61850.LinkedList_destroy(logicalNodes)
				device = iec61850.LinkedList_getNext(device)

			iec61850.LinkedList_destroy(deviceList)
		return model


	@staticmethod
	def tdiscovery(con):
		tmodel = {}

		ret = iec61850.IedConnection_getLogicalDeviceList(con)
		if isinstance(ret, int):#ret becomes int if connection is lost
			return model
		[deviceList, error] = ret

		if error != 0:
			logger.error("could not get logical device list, error:%i" % error)

		if deviceList != None:
			device = iec61850.LinkedList_getNext(deviceList)
			while device:
				LD_name=iec61850.toCharP(device.data)
				tmodel[LD_name] = {}

				ret = iec61850.IedConnection_getLogicalDeviceDirectory(con, LD_name)
				if isinstance(ret, int):#ret becomes int if connection is lost
					iec61850.LinkedList_destroy(deviceList)
					return model
					
				[logicalNodes, error] = ret

				logicalNode = iec61850.LinkedList_getNext(logicalNodes)
				while logicalNode:
					LN_name=iec61850.toCharP(logicalNode.data)
					tmodel[LD_name][LN_name] = {}

					#[LNobjects, error] = iec61850.IedConnection_getLogicalNodeVariables(con, LD_name+"/"+LN_name)
					ret = iec61850.IedConnection_getLogicalNodeDirectory(con, LD_name+"/"+LN_name,iec61850.ACSI_CLASS_DATA_OBJECT)
					if isinstance(ret, int):#ret becomes int if connection is lost
						iec61850.LinkedList_destroy(logicalNodes)
						iec61850.LinkedList_destroy(deviceList)
						return model
					[LNobjects, error] = ret

					LNobject = iec61850.LinkedList_getNext(LNobjects)
					while LNobject:
						Do = iec61850.toCharP(LNobject.data)
						tmodel[LD_name][LN_name][Do] = {}

						doRef = LD_name+"/"+LN_name+"."+Do

						tmodel[LD_name][LN_name][Do] = iec61850client.tprintDataDirectory(con, doRef)

						LNobject = iec61850.LinkedList_getNext(LNobject)
					iec61850.LinkedList_destroy(LNobjects)

					ret = iec61850.IedConnection_getLogicalNodeDirectory(con, LD_name+"/"+LN_name, iec61850.ACSI_CLASS_DATA_SET)
					if isinstance(ret, int):#ret becomes int if connection is lost
						iec61850.LinkedList_destroy(logicalNodes)
						iec61850.LinkedList_destroy(deviceList)
						return model
					[LNdss, error] = ret

					LNds = iec61850.LinkedList_getNext(LNdss)
					while LNds:
						isDel = None
						DSname = iec61850.toCharP(LNds.data)
						tmodel[LD_name][LN_name][DSname] = {}

						#cannot pass the right type to isDeletable(last arg).. keeps complaining about 'bool *', and isDel = ctypes.pointer(ctypes.c_bool(False)) does not work
						ret = iec61850.IedConnection_getDataSetDirectory(con, LD_name+"/"+LN_name+"."+DSname, isDel )  
						if isinstance(ret, int):#ret becomes int if connection is lost
							iec61850.LinkedList_destroy(LNdss)
							iec61850.LinkedList_destroy(logicalNodes)
							iec61850.LinkedList_destroy(deviceList)
							return model
						[dataSetMembers, error] = ret
						#all DS are assumed not deletable 
						#if isDel == None:
						#	logger.error("  DS: %s, not Deletable" % DSname)
						#else:
						#	logger.error("  DS: %s, is Deletable" % DSname)
						dataSetMemberRef = iec61850.LinkedList_getNext(dataSetMembers)

						i = 0
						while dataSetMemberRef:
							dsRef = iec61850.toCharP(dataSetMemberRef.data)
							DX = dsRef[:-4]
							FC = dsRef[-3:-1]
							tmodel[LD_name][LN_name][DSname][str(i)] = DX
							dataSetMemberRef = iec61850.LinkedList_getNext(dataSetMemberRef)
							i += 1
						iec61850.LinkedList_destroy(dataSetMembers)
						LNds = iec61850.LinkedList_getNext(LNds)

					iec61850.LinkedList_destroy(LNdss)
					logicalNode = iec61850.LinkedList_getNext(logicalNode)

				iec61850.LinkedList_destroy(logicalNodes)
				device = iec61850.LinkedList_getNext(device)

			iec61850.LinkedList_destroy(deviceList)
		return tmodel


	@staticmethod
	def getMMsValue(type, value, size=8):
		#allocate mmsvalue based on type
		if type == "visible-string":
			return iec61850.MmsValue_newVisibleString(str(value))
		if type == "boolean":
			if value == "True":
				return iec61850.MmsValue_newBoolean(True)
			else:
				return iec61850.MmsValue_newBoolean(False)
		if type == "integer":
			return iec61850.MmsValue_newInteger(int(value))
		#untested
		if type == "unsigned":
			return iec61850.MmsValue_newUnsignedFromUint32(int(value))
		if type == "mms-string":
			return iec61850.MmsValue_newMmsString(str(value))
		if type == "float":
			return iec61850.MmsValue_newFloat(float(value))
		if type ==  "binary-time":
			return iec61850.MmsValue_newBinaryTime(int(value))
		if type == "bit-string":
			bs = iec61850.MmsValue_newBitString(size)
			return iec61850.MmsValue_setBitStringFromInteger(bs,int(value))
		if type == "generalized-time":
			return iec61850.MmsValue_newUtcTimeByMsTime(int(value))
		if type == "utc-time":
			return iec61850.MmsValue_newUtcTimeByMsTime(int(value))
		if type == "octet-string":
			sl = len(value)
			sptr = (ctypes.c_char * sl).from_buffer(value)

			buf = iec61850.MmsValue_newOctetString(sl,127)
			buff = ctypes.cast(int(buf), ctypes.POINTER(ctypes.c_char))

			ctypes.memmove(buff, sptr, sl)
			return buf
		#unsupported types
		if type == "array":
			return None
		if type ==  "bcd":
			return None
		if type == "access-error":
			return None
		if type == "oid":
			return None
		if type == "structure":
			return  None
		if type == "unknown(error)":
			return None
		logger.error("Mms value type not supported")
		return None


	@staticmethod
	def writeValue(con, model, ref, value):
		fc = iec61850.FunctionalConstraint_fromString(model[ref]['FC']) 
		mmsvalue = iec61850client.getMMsValue(model[ref]['type'],value)
		if not mmsvalue:
			return model,-1

		error = iec61850.IedConnection_writeObject(con, ref, fc, mmsvalue)
		iec61850.MmsValue_delete(mmsvalue)
		if error == 0:
			ret = iec61850.IedConnection_readObject(con, ref, fc)
			if isinstance(ret, int):#ret becomes int if connection is lost
				return model, ret
			[RetValue, error] = ret
			if error == 0:
				model[ref]['value'], model[ref]['type'] = iec61850client.printValue(RetValue)
				iec61850.MmsValue_delete(RetValue)
		return model, error
	

	@staticmethod
	def updateValueInModel(con, model, ref):
		if model[ref]['reftype'] != 'DA': 
			error = -1
			submodel = iec61850client.printDataDirectory(con,ref)
			if submodel:
				model.update(submodel)
				error = 0
		else:
			fc = iec61850.FunctionalConstraint_fromString(model[ref]['FC']) 
			ret = iec61850.IedConnection_readObject(con, ref, fc)
			if isinstance(ret, int):#ret becomes int if connection is lost
				return model, ret

			[RetValue, error] = ret
			if error == 0:
				model[ref]['value'], model[ref]['type'] = iec61850client.printValue(RetValue)
				iec61850.MmsValue_delete(RetValue)
		return model, error


	# retrieve an active connection to IED, and up to date datamodel, stored in 'connections'
	def getIED(self, host, port):
		if port == "" or port == None:
			port = 102

		if host == None:
			logger.error("missing hostname")
			return -1

		tupl = host + ":" + str(port)
		if tupl in self.connections and self.connections[tupl]["con"] != None:
			if not self.connections[tupl]["model"]:
				con = self.connections[tupl]["con"]
				model = iec61850client.discovery(con)
				if model: #if model is not empty
					# store the model
					self.connections[tupl]["model"] = model
					return 0
				else:
					#we could not perform a discovery, so remove connection
					iec61850.IedConnection_destroy(con)
					self.connections[tupl]["con"] = None
					return -1
			else:
				#we have a connection and a model
				return 0
		
		if not tupl in self.connections:
			self.connections[tupl] = {}
			self.connections[tupl]["con"] = None
			self.connections[tupl]["model"] = {}

		con = iec61850.IedConnection_create()
		error = iec61850.IedConnection_connect(con, host, port)
		if (error == iec61850.IED_ERROR_OK):
			# store the active connection
			self.connections[tupl]["con"] = con
			# read the model
			model = iec61850client.discovery(con)
			if model: #if model is not empty
				# store the model
				self.connections[tupl]["model"] = model
				return 0
			else:
				return -1
		else:
			iec61850.IedConnection_destroy(con)
			return -1


	# write a value to an active connection
	def registerWriteValue(self, ref, value):
		uri_ref = urlparse(ref)
		port = uri_ref.port
		if port == "" or port == None:
			port = 102

		if uri_ref.scheme != "iec61850":
			logger.error("incorrect scheme, only iec61860 is supported, not %s" % uri_ref.scheme)
			return -1

		if uri_ref.hostname == None:
			logger.error("missing hostname: %s" % ref)
			return -1

		tupl = uri_ref.hostname + ":" + str(port)

		#check if connection is active, or reconnect
		err = self.getIED(uri_ref.hostname, port)
		if err == 0:
			con = self.connections[tupl]['con']
			if not con:
				logger.error("no valid connection")
				return -1			

			model = self.connections[tupl]['model']
			if not model:
				logger.error("no valid model")
				return -1

			if uri_ref.path[1:] in model:
				model, error = iec61850client.writeValue(con, model, uri_ref.path[1:], value)
				if error == 0:
					self.connections[tupl]['model'] = model
					logger.debug("Value '%s' written to %s" % (model[uri_ref.path[1:]]['value'], ref) )

					if self.readvaluecallback != None:
						self.readvaluecallback(ref, model[uri_ref.path[1:]])

					return 0
				else:
					logger.error("could not write '%s' to %s with error: %i" % (model[uri_ref.path[1:]], ref, error))
					if error == 3: #we lost the connection
						iec61850.IedConnection_destroy(con)
						self.connections[tupl]['con'] = None
					return error
			else:
				logger.error("could not find %s in model" % uri_ref.path[1:])
		else:
			logger.error("no connection to IED: %s:%s" % (uri_ref.hostname, port) )
		return -1


	# read a value from an active connection
	def ReadValue(self, ref):
		uri_ref = urlparse(ref)
		port = uri_ref.port
		if port == "" or port == None:
			port = 102

		if uri_ref.scheme != "iec61850":
			logger.error("incorrect scheme, only iec61860 is supported, not %s" % uri_ref.scheme)
			return {}, -1

		if uri_ref.hostname == None:
			logger.error("missing hostname: %s" % ref)
			return {}, -1

		tupl = uri_ref.hostname + ":" + str(port)


		#check if connection is active, or reconnect
		err = self.getIED(uri_ref.hostname, port)
		if err == 0:
			con = self.connections[tupl]['con']
			if not con:
				logger.error("no valid connection")
				return {}, -1			

			model = self.connections[tupl]['model']
			if not model:
				logger.error("no valid model")
				return {}, -1

			if uri_ref.path[1:] in model:
				model, error = iec61850client.updateValueInModel(con, model, uri_ref.path[1:])
				if error == 0:
					self.connections[tupl]['model'] = model
					logger.debug("Value '%s' read from %s" % (str(model[uri_ref.path[1:]]), ref) )

					if self.readvaluecallback != None:
						self.readvaluecallback(ref, model[uri_ref.path[1:]])

					return model[uri_ref.path[1:]], 0 #TODO: also return children, if its a struct
				else:
					logger.error("could not read '%s' with error: %i" % (ref, error))
					if error == 3: #we lost the connection
						iec61850.IedConnection_destroy(con)
						self.connections[tupl]['con'] = None
			else:
				logger.error("could not find %s in model" % uri_ref.path[1:])
		else:
			logger.error("no connection to IED: %s:%s" % (uri_ref.hostname, port) )
		return {}, -1



	# register value for reading
	def registerReadValue(self,ref):
		# check if present in dataset/report, and subscribe is impossible for now due to lacking reportcallback implementation in SWIG
		# i.e. there is no valid way to pass a function-pointer for the callback in IedConnection_installReportHandler
		# so periodic poll

		#if we allready have it in the list
		if ref in self.polling:
			logger.debug("reference: %s allready registered" % ref)
			return 0

		uri_ref = urlparse(ref)
		port = uri_ref.port
		if port == "" or port == None:
			port = 102


		if uri_ref.scheme != "iec61850":
			logger.error("incorrect scheme, only iec61860 is supported, not %s" % uri_ref.scheme)
			return -1

		if uri_ref.hostname == None:
			logger.error("missing hostname: %s" % ref)
			return -1

		tupl = uri_ref.hostname + ":" + str(port)

		#check if connection is active, or reconnect
		err = self.getIED(uri_ref.hostname, port)
		if err == 0:
			#only add an IED if it could be connected to
			model = self.connections[tupl]['model']
			#check if the ref exists in the model
			if uri_ref.path[1:] in model:
				self.polling[ref] = 1
				return 0
			else:
				logger.error("could not find %s in model" % uri_ref.path[1:])
		else:
			logger.error("no connection to IED: %s:%s, ref:%s not registered" % (uri_ref.hostname, port, ref) )
		return -1


	# retrieve all registered values by polling
	def poll(self):
		for key in self.polling:
			uri_ref = urlparse(key)

			port = uri_ref.port
			if port == "" or port == None:
				port = 102


			if uri_ref.scheme != "iec61850":
				logger.error("incorrect scheme, only iec61860 is supported, not %s" % uri_ref.scheme)
				continue

			if uri_ref.hostname == None:
				logger.error("missing hostname: %s" % key)
				continue

			tupl = uri_ref.hostname + ":" + str(port)

			#check if connection is active, or reconnect
			err = self.getIED(uri_ref.hostname, port)
			if err == 0:
				con = self.connections[tupl]['con']
				model = self.connections[tupl]['model']
				if con and model:
					model, err = iec61850client.updateValueInModel(con, model, uri_ref.path[1:])
					if err == 0:
						self.connections[tupl]['model'] = model
						logger.debug("value:%s read from key: %s" % (model[uri_ref.path[1:]]['value'], key))
						#call function with ref+value
						if self.readvaluecallback != None:
							self.readvaluecallback(key, model[uri_ref.path[1:]])

					else:
						logger.error("model not updated for %s with error: %i" % (key, err))
						if err == 3: #we lost the connection
							iec61850.IedConnection_destroy(con)
							self.connections[tupl]['con'] = None
			else:
				logger.error("model not updated for %s with error: %i" % (key, err))


	# retrieve datamodel from server
	def getDatamodel(self, ref=None, hostname="localhost", port=102):
		# if uri provided, it will have presedence over hostname and port
		if ref != None:
			uri_ref = urlparse(ref)
			hostname = uri_ref.hostname
			port = uri_ref.port

		# if port is explicitly defined as "" or None, assume 102
		if port == "" or port == None:
			port = 102

		err = self.getIED(hostname, port)
		if err == 0:
			tupl =  hostname + ":" + str(port)
			return self.connections[tupl]['model']
		else:
			logger.error("no connection to IED: %s:%s" % (hostname, port) )
			return {}
	

	def getRegisteredIEDs(self):
		return self.connections


if __name__=="__main__":
	logging.basicConfig(format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
		level=logging.DEBUG)
	# note the `logger` from above is now properly configured
	logger.debug("started")

	hostname = "localhost"
	tcpPort = 102
	if len(sys.argv)>1:
		hostname = sys.argv[1]
	if len(sys.argv)>2:
		port = sys.argv[2]

	con = iec61850.IedConnection_create()
	error = iec61850.IedConnection_connect(con, hostname, tcpPort)
	if (error == iec61850.IED_ERROR_OK):
		model = iec61850client.tdiscovery(con)
		for key in model:
			for key2 in model[key]:
				for key3 in model[key][key2]:
					for key4 in model[key][key2][key3]:
						logger.info(key + "/" + key2 + "." + key3 + "." + key4 + ":\t" + str(model[key][key2][key3][key4]))
		iec61850.IedConnection_close(con)
		exit()
		#for key in model:
		#	logger.error("[" + model[key]['FC'] + "] " + model[key]['type'] + "\t" + key + "\t" + model[key]['value'])
	else:
		logger.error("Failed to connect to %s:%i\n"%(hostname, tcpPort))
	iec61850.IedConnection_destroy(con)

	cl = iec61850client()

	err = cl.registerReadValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/TVTR1.Vol.instMag.i")
	err = cl.registerReadValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/TVTR2.Vol.instMag.i")
	err = cl.registerReadValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/TVTR3.Vol.instMag.i")
	err = cl.registerReadValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/TVTR4.Vol.instMag.i")

	err = cl.registerWriteValue("iec61850://127.0.0.1/TEMPLATEMUnn/LLN0.MSVCB01.SvEna",True)
	#while True:
	cl.poll()
	cl.registerWriteValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/LLN0.MSVCB01.SvEna",False)
	time.sleep(0.719)
	cl.poll()
	cl.registerWriteValue("iec61850://127.0.0.1:102/TEMPLATEMUnn/LLN0.MSVCB01.SvEna",True)
